/*
 * Copyright Â© Thinking Robots, Inc., Tufts University, and others 2024.
 */

package edu.tufts.hrilab.action.gui;

import javax.swing.*;
import javax.swing.plaf.basic.BasicArrowButton;
import javax.swing.table.DefaultTableModel;
import java.awt.*;

/**
 * Implementation of a table with additional controls
 * for ordering, adding and removing rows.
 * @author luca
 */
public class OrderedTable {
  private JTable table;
  private BasicArrowButton up;
  private BasicArrowButton down;
  private JButton remove;
  private JButton add;
  private JPanel main;

  OrderedTable(JComponent parent) {
    $$$setupUI$$$();

    table.getTableHeader().setReorderingAllowed(false);

    // Disable until row is selected.
    up.setEnabled(false);
    down.setEnabled(false);
    remove.setEnabled(false);

    setupListeners();

    parent.add(main);
  }

  OrderedTable(JComponent parent, DefaultTableModel model) {
    this(parent);
    setTableModel(model);
  }

  public void setTableModel(DefaultTableModel model) {
    table.setModel(model);

    // Build combo box editors for enums
    for (int c = 0; c < model.getColumnCount(); c++) {
      if (model.getColumnClass(c).isEnum()) {
        JComboBox<Object> cb = new JComboBox<>();
        for (Object o : model.getColumnClass(c).getEnumConstants()) {
          cb.addItem(o);
        }
        table.getColumnModel().getColumn(c).setCellEditor(new DefaultCellEditor(cb));
      }
    }
  }


  private void createUIComponents() {
    up = new BasicArrowButton(BasicArrowButton.NORTH);
    down = new BasicArrowButton(BasicArrowButton.SOUTH);
  }

  public void setEnabled(boolean enabled) {
    table.setEnabled(enabled);
    up.setEnabled(enabled);
    down.setEnabled(enabled);
    remove.setEnabled(enabled);
    add.setEnabled(enabled);
    main.setEnabled(enabled);
  }

  public JTable table() {
    return table;
  }

  public void setColumnWidth(int column, int width) {
    table.getColumnModel().getColumn(column).setMinWidth(width);
    table.getColumnModel().getColumn(column).setMaxWidth(width);
  }

  private void setupListeners() {
    table.getSelectionModel().addListSelectionListener(event -> {
      if (table.getSelectedRow() > -1
          && table.getModel().isCellEditable(table.getSelectedRow(), table.getSelectedColumn())) {
        up.setEnabled(true);
        down.setEnabled(true);
        remove.setEnabled(true);
      } else {
        up.setEnabled(false);
        down.setEnabled(false);
        remove.setEnabled(false);
      }
    });

    up.addActionListener(e -> {
      int row = table.getSelectedRow();
      if (row > 0 && table.getModel().isCellEditable(row, table.getSelectedColumn())
          && table.getModel().isCellEditable(row - 1, table.getSelectedColumn())) {
        ((DefaultTableModel) table.getModel()).moveRow(row, row, row - 1);
        table.setRowSelectionInterval(row - 1, row - 1);
      }
    });

    down.addActionListener(e -> {
      int row = table.getSelectedRow();
      if (row > -1 && row < table.getRowCount() - 1
          && table.getModel().isCellEditable(row, table.getSelectedColumn())
          && table.getModel().isCellEditable(row + 1, table.getSelectedColumn())) {
        ((DefaultTableModel) table.getModel()).moveRow(row, row, row + 1);
        table.setRowSelectionInterval(row + 1, row + 1);
      }
    });

    add.addActionListener(e -> {
      int row = table.getSelectedRow();
      if (row > -1 && table.getModel().isCellEditable(row + 1, table.getSelectedColumn())) {
        ((DefaultTableModel) table.getModel()).insertRow(row + 1, new Object[]{});
        table.setRowSelectionInterval(row + 1, row + 1);
      } else {
        ((DefaultTableModel) table.getModel()).addRow(new Object[]{});
        table.setRowSelectionInterval(table.getRowCount() - 1, table.getRowCount() - 1);
      }
    });

    remove.addActionListener(e -> {
      int row = table.getSelectedRow();
      if (row > -1 && table.getModel().isCellEditable(row, table.getSelectedColumn())) {
        int confirm = JOptionPane.showConfirmDialog(null,
            "Are you sure that you want to remove the selected line?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
          ((DefaultTableModel) table.getModel()).removeRow(row);
        }
      }
    });
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    createUIComponents();
    main = new JPanel();
    main.setLayout(new GridBagLayout());
    main.setMinimumSize(new Dimension(50, 50));
    main.setPreferredSize(new Dimension(200, 100));
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new GridBagLayout());
    GridBagConstraints gbc;
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.fill = GridBagConstraints.BOTH;
    main.add(panel1, gbc);
    final JScrollPane scrollPane1 = new JScrollPane();
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.fill = GridBagConstraints.BOTH;
    panel1.add(scrollPane1, gbc);
    table = new JTable();
    scrollPane1.setViewportView(table);
    final JPanel panel2 = new JPanel();
    panel2.setLayout(new GridBagLayout());
    panel2.setMaximumSize(new Dimension(20, 2147483647));
    panel2.setMinimumSize(new Dimension(20, 190));
    panel2.setPreferredSize(new Dimension(20, 190));
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 0;
    gbc.weighty = 1.0;
    gbc.anchor = GridBagConstraints.EAST;
    gbc.fill = GridBagConstraints.VERTICAL;
    main.add(panel2, gbc);
    final JPanel panel3 = new JPanel();
    panel3.setLayout(new GridBagLayout());
    panel3.setMaximumSize(new Dimension(20, 2147483647));
    panel3.setMinimumSize(new Dimension(20, 64));
    panel3.setPreferredSize(new Dimension(20, 64));
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.anchor = GridBagConstraints.NORTH;
    panel2.add(panel3, gbc);
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    panel3.add(up, gbc);
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 1;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    panel3.add(down, gbc);
    final JPanel panel4 = new JPanel();
    panel4.setLayout(new GridBagLayout());
    panel4.setMaximumSize(new Dimension(20, 2147483647));
    panel4.setMinimumSize(new Dimension(20, 50));
    panel4.setPreferredSize(new Dimension(20, 50));
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 1;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.anchor = GridBagConstraints.SOUTH;
    panel2.add(panel4, gbc);
    remove = new JButton();
    remove.setMargin(new Insets(0, 0, 0, 0));
    remove.setMaximumSize(new Dimension(16, 16));
    remove.setMinimumSize(new Dimension(16, 16));
    remove.setPreferredSize(new Dimension(16, 16));
    remove.setText("-");
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    panel4.add(remove, gbc);
    add = new JButton();
    add.setMargin(new Insets(0, 0, 0, 0));
    add.setMaximumSize(new Dimension(16, 16));
    add.setMinimumSize(new Dimension(16, 16));
    add.setOpaque(false);
    add.setPreferredSize(new Dimension(16, 16));
    add.setText("+");
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 1;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    panel4.add(add, gbc);
  }

  public JComponent $$$getRootComponent$$$() {
    return main;
  }
}
