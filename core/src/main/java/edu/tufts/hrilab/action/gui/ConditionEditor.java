/*
 * Copyright Â© Thinking Robots, Inc., Tufts University, and others 2024.
 */

/**
 * @author luca
 */

package edu.tufts.hrilab.action.gui;

import edu.tufts.hrilab.action.Condition;
import edu.tufts.hrilab.action.ConditionType;
import edu.tufts.hrilab.action.gui.tablemodels.ConditionsTableModel;

import javax.swing.*;
import javax.swing.table.TableCellEditor;
import java.awt.*;

/**
 * Editor for conditions.
 */
public class ConditionEditor extends AbstractCellEditor implements TableCellEditor {
  private Condition currentCondition;
  private JButton edit;
  private OrderedTable conditions;
  private JDialog dialog;
  private JButton okButton;
  private JButton cancelButton;
  private JPanel tablePanel;
  private JPanel panel;

  /**
   * Set up the editor (from the table's point of view).
   */
  public ConditionEditor() {
    edit = new JButton();
    edit.setBorderPainted(false);
    edit.setHorizontalAlignment(SwingConstants.LEFT);

    conditions = new OrderedTable(tablePanel);

    dialog = new JDialog();
    dialog.setTitle("Edit condition");
    dialog.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    dialog.setContentPane(panel);
    dialog.pack();

    setupListeners();
  }

  private void setupListeners() {
    //The user has clicked the cell (table), so bring up the dialog.
    edit.addActionListener(e -> {
      if (currentCondition != null) {
        edit.setText(currentCondition.toString());
      } else {
        edit.setText("New condition");
      }
      edit.setVisible(true);

      conditions.setTableModel(new ConditionsTableModel.Subparts(currentCondition));
      conditions.setColumnWidth(1, 80);

      dialog.setVisible(true);
    });

    //The user has clicked the OK button, update condition and close.
    okButton.addActionListener(e -> {
      CellEditor cellEditor = conditions.table().getCellEditor();
      if (cellEditor != null) {
        cellEditor.stopCellEditing();
      }

      Condition newCond = null;

      if (currentCondition != null) {
        newCond = ((ConditionsTableModel.Subparts) conditions.table().getModel())
            .export(currentCondition.getType());
      } else if (conditions.table().getRowCount() > 0) {
        newCond = ((ConditionsTableModel.Subparts) conditions.table().getModel())
            .export(ConditionType.PRE); //Default to precondition if we're editing a new condition.
      }

      if (newCond != null) {
        currentCondition = newCond;
        dialog.setVisible(false);
        edit.setVisible(false);
        fireEditingStopped();
      } else {
        JOptionPane.showMessageDialog(dialog, "Invalid condition. Please correct or cancel edit.",
            "Error", JOptionPane.ERROR_MESSAGE);
      }
    });

    // The user canceled. Close.
    cancelButton.addActionListener(e -> {
      dialog.setVisible(false);
      edit.setVisible(false);
      fireEditingCanceled();
    });
  }

  //Implement the one CellEditor method that AbstractCellEditor doesn't.
  @Override
  public Object getCellEditorValue() {
    return currentCondition;
  }

  //Implement the one method defined by TableCellEditor.
  @Override
  public Component getTableCellEditorComponent(JTable table,
                                               Object value,
                                               boolean isSelected,
                                               int row,
                                               int column) {
    currentCondition = (Condition) value;
    return edit;
  }

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    panel = new JPanel();
    panel.setLayout(new GridBagLayout());
    tablePanel = new JPanel();
    tablePanel.setLayout(new BorderLayout(0, 0));
    GridBagConstraints gbc;
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.fill = GridBagConstraints.BOTH;
    panel.add(tablePanel, gbc);
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new GridBagLayout());
    panel1.setMaximumSize(new Dimension(2147483647, 30));
    panel1.setMinimumSize(new Dimension(400, 30));
    panel1.setPreferredSize(new Dimension(400, 30));
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 1;
    gbc.weightx = 1.0;
    gbc.anchor = GridBagConstraints.SOUTH;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    panel.add(panel1, gbc);
    cancelButton = new JButton();
    cancelButton.setText("Cancel");
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    panel1.add(cancelButton, gbc);
    okButton = new JButton();
    okButton.setText("Ok");
    gbc = new GridBagConstraints();
    gbc.gridx = 2;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    panel1.add(okButton, gbc);
    final JPanel panel2 = new JPanel();
    panel2.setLayout(new GridBagLayout());
    gbc = new GridBagConstraints();
    gbc.gridx = 1;
    gbc.gridy = 0;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    gbc.fill = GridBagConstraints.BOTH;
    panel1.add(panel2, gbc);
  }

  public JComponent $$$getRootComponent$$$() {
    return panel;
  }
}

